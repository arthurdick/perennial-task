#!/usr/bin/env php
<?php

declare(strict_types=1);

// Perennial Task - Main Controller Script
// This script validates dependencies and dispatches commands to the appropriate PHP scripts.
const VERSION = '1.7.1';
const MIN_PHP_VERSION = '7.4';

/**
 * --- Pre-flight Checks ---
 * Ensures the environment meets the application's requirements.
 */
function run_preflight_checks(): void
{
    // Check for minimum PHP version.
    if (version_compare(PHP_VERSION, MIN_PHP_VERSION, '<')) {
        file_put_contents('php://stderr', "Error: Your PHP version is " . PHP_VERSION . ". Perennial Task requires PHP version " . MIN_PHP_VERSION . " or higher.\n");
        exit(40);
    }

    // Check for required SimpleXML extension.
    if (!extension_loaded('SimpleXML')) {
        file_put_contents('php://stderr', "Error: The required PHP extension 'SimpleXML' is not enabled.\n");
        file_put_contents('php://stderr', "Please install or enable it to use Perennial Task (e.g., 'sudo apt-get install php-xml').\n");
        exit(40);
    }
}

/**
 * --- Help Message ---
 * Displays the help text for the application.
 */
function display_help(): void
{
    echo "Perennial Task - A simple command-line task manager.\n";
    echo "\n";
    echo "Usage: prn [command] [argument]\n";
    echo "\n";
    echo "Commands:\n";
    echo "  create             Interactively or non-interactively create a new task.\n";
    echo "  edit [task_file]   Edit a task. Select from a list or specify a file.\n";
    echo "  complete [task_file] Mark a task as complete.\n";
    echo "  describe [task_file] Show a detailed description of a task.\n";
    echo "  history [task_file]  Show the full completion history of a single task.\n";
    echo "  report [date]      Show a report of all due and upcoming tasks.\n";
    echo "  help [command]     Show this help message, or help for a specific command.\n";
    echo "  version            Display the application version.\n";
}

function display_create_help(): void
{
    echo "Usage: prn create [--name <name>] [--due <YYYY-MM-DD>] [--priority <int>] [--preview <days>] [--reschedule-interval <interval>] [--reschedule-from <basis>]\n\n";
    echo "Options for 'create':\n";
    echo "  --name <name>                  The name of the task (required for non-interactive use).\n";
    echo "  --due <YYYY-MM-DD>             The date the task is due.\n";
    echo "  --priority <int>               Set the task's priority (e.g., -2, 0, 10). Defaults to 0.\n";
    echo "  --preview <days>               The number of days in advance to show the task in reports.\n";
    echo "  --reschedule-interval <interval> The interval to reschedule the task (e.g., '7 days', '1 month').\n";
    echo "  --reschedule-from <basis>      The basis for rescheduling ('due_date' or 'completion_date').\n";
}

function display_edit_help(): void
{
    echo "Usage: prn edit <task_file> [--set-name <name>] [--set-due <YYYY-MM-DD>] ...\n\n";
    echo "Options for 'edit':\n";
    echo "  --set-name <name>              Set a new name for the task.\n";
    echo "  --rename-file                  Rename the task file to match the new name (only with --set-name).\n";
    echo "  --set-due <YYYY-MM-DD>         Set a new due date for the task.\n";
    echo "  --remove-due                   Remove the due date and all scheduling settings from a task.\n";
    echo "  --set-priority <int>           Set a new priority for the task.\n";
    echo "  --set-preview <days>           Set the number of preview days.\n";
    echo "  --remove-preview               Remove the preview setting from the task.\n";
    echo "  --set-reschedule-interval <interval> Set the reschedule interval.\n";
    echo "  --set-reschedule-from <basis>  Set the reschedule basis ('due_date' or 'completion_date').\n";
    echo "  --remove-reschedule            Remove all reschedule settings from the task.\n";
}

function display_complete_help(): void
{
    echo "Usage: prn complete <task_file> [--date <YYYY-MM-DD>]\n\n";
    echo "Options for 'complete':\n";
    echo "  --date <YYYY-MM-DD>            The date the task was completed (defaults to today).\n";
}

function display_report_help(): void
{
    echo "Usage: prn report [date]\n\n";
    echo "Arguments for 'report':\n";
    echo "  [date]                         An optional date to run the report for (defaults to today).\n";
}

function display_describe_help(): void
{
    echo "Usage: prn describe <task_file>\n\n";
    echo "Arguments for 'describe':\n";
    echo "  <task_file>      The path to the task file you want to describe.\n";
    echo "                   If not provided, a list of tasks will be shown to choose from.\n";
}

function display_history_help(): void
{
    echo "Usage: prn history <task_file>\n\n";
    echo "Arguments for 'history':\n";
    echo "  <task_file>      The path to the task file to view the history of.\n";
    echo "                   If not provided, a list of tasks will be shown to choose from.\n";
}

function display_version_help(): void
{
    echo "Usage: prn version\n\n";
    echo "Displays the application's current version number.\n";
}

function display_help_help(): void
{
    echo "Usage: prn help [command]\n\n";
    echo "Displays the main help message, or detailed help for a specific command.\n";
}


/**
 * --- Main Application Logic ---
 */
function main(array $argv): void
{
    run_preflight_checks();
    $app_dir = Phar::running() ? 'phar://prn.phar' : dirname(realpath(__FILE__));
    $command = $argv[1] ?? null;
    $sub_command = $argv[2] ?? null;
    if ($command === 'help' || $command === '--help' || $command === '-h') {
        switch ($sub_command) {
            case 'create':
                display_create_help();
                break;
            case 'edit':
                display_edit_help();
                break;
            case 'complete':
                display_complete_help();
                break;
            case 'report':
                display_report_help();
                break;
            case 'describe':
                display_describe_help();
                break;
            case 'history':
                display_history_help();
                break;
            case 'version':
                display_version_help();
                break;
            case 'help':
                display_help_help();
                break;
            default:
                display_help();
        }
        exit(0);
    }

    switch ($command) {
        case 'create':
        case 'edit':
        case 'complete':
        case 'describe':
        case 'history':
        case 'report':
            $script_name = "$command.php";
            $script_path = "{$app_dir}/{$script_name}";

            if (file_exists($script_path)) {
                require_once $script_path;
            } else {
                file_put_contents('php://stderr', "Error: Command script '$script_name' not found.\n");
                exit(20);
            }
            exit(0);

        case 'version':
        case '--version':
        case '-v':
            echo "Perennial Task version " .
                VERSION . "\n";
            exit(0);

        case '--get-tasks-dir':
            require_once 'config.php';
            echo TASKS_DIR;
            exit(0);

        default:
            if (is_null($command)) {
                file_put_contents('php://stderr', "Error: No command provided.\n");
            } else {
                file_put_contents('php://stderr', "Error: Unknown command '$command'.\n");
            }
            file_put_contents('php://stderr', "Use 'prn help' to see a list of available commands.\n");
            exit(10);
    }
}

// Run the application.
main($argv);
